(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var o=n(0),a=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),b=o,h=p["".concat(i,".").concat(b)]||p[b]||d[b]||r;return n?a.a.createElement(h,s(s({ref:t},l),{},{components:n})):a.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},102:function(e,t,n){"use strict";var o=n(0),a=n(19);t.a=function(){const e=Object(o.useContext)(a.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},103:function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return i}));var o=n(102),a=n(104);function r(){const{siteConfig:{baseUrl:e="/",url:t}={}}=Object(o.a)();return{withBaseUrl:(n,o)=>function(e,t,n,{forcePrependBaseUrl:o=!1,absolute:r=!1}={}){if(!n)return n;if(n.startsWith("#"))return n;if(Object(a.b)(n))return n;if(o)return t+n;const i=!n.startsWith(t)?t+n.replace(/^\//,""):n;return r?e+i:i}(t,e,n,o)}}function i(e,t={}){const{withBaseUrl:n}=r();return n(e,t)}},104:function(e,t,n){"use strict";function o(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!o(e)}n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return a}))},92:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var o=n(2),a=n(6),r=(n(0),n(101)),i=n(103),s={id:"building-custom-linq-expressions",title:"Building custom LINQ expressions",author:"Jaco Jansen van Vuuren",author_title:"Software Developer",author_url:"https://github.com/jacojvv-dev",author_image_url:"https://avatars0.githubusercontent.com/u/14131955?v=4",tags:["c#","csharp","expressions","linq"],image:"https://www.jacojvv.dev/img/covers/2021-04-18-building-custom-linq-expressions.png"},c={permalink:"/blog/building-custom-linq-expressions",editUrl:"https://github.com/jacojvv-dev/jacojvv.dev/edit/main/blog/2021-04-18-building-custom-linq-expressions.md",source:"@site/blog\\2021-04-18-building-custom-linq-expressions.md",description:"I ran into a scenario this week where I needed to build my own expression to query a database and thought that it could make for an interesting post - maybe we could all learn something about LINQ and expressions together.",date:"2021-04-18T00:00:00.000Z",tags:[{label:"c#",permalink:"/blog/tags/c"},{label:"csharp",permalink:"/blog/tags/csharp"},{label:"expressions",permalink:"/blog/tags/expressions"},{label:"linq",permalink:"/blog/tags/linq"}],title:"Building custom LINQ expressions",readingTime:5.285,truncated:!0,nextItem:{title:"Fun with IEnumerable and collection initializers",permalink:"/blog/fun-with-ienumerable-and-collection-initializers"}},l=[{value:"Expressions?",id:"expressions",children:[]},{value:"Ok. But why would I do all of this extra work?",id:"ok-but-why-would-i-do-all-of-this-extra-work",children:[]},{value:"The problem I needed to solve",id:"the-problem-i-needed-to-solve",children:[]},{value:"Quick environment setup",id:"quick-environment-setup",children:[]},{value:"The first naive approach",id:"the-first-naive-approach",children:[]},{value:"Expressions to the rescue",id:"expressions-to-the-rescue",children:[]}],u={rightToc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"I ran into a scenario this week where I needed to build my own expression to query a database and thought that it could make for an interesting post - maybe we could all learn something about LINQ and expressions together."),Object(r.b)("h3",{id:"expressions"},"Expressions?"),Object(r.b)("p",null,"Expressions are simple a way to strongly type lambda expressions - I find this easier to explain visually."),Object(r.b)("p",null,"So looking at the following code sample, is there a way we can write the argument to ",Object(r.b)("inlineCode",{parentName:"p"},".Where")," any differently?"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-csharp"}),'var numbers = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\nvar numbersGreaterThanEight = numbers\n    .Where(num => num > 8) // can this be achieved in a different way?\n    .ToList();\n\nvar output = string.Join(", ", numbersGreaterThanEight);\nConsole.WriteLine(output); // 9, 10, 11, 12, 13, 14, 15\n')),Object(r.b)("p",null,"It turns out that you can - the code to do it is below. If you don't understand it all just yet - don't worry - I'll explain it afterwards."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-csharp"}),'var parameter = Expression.Parameter(typeof(int), "num");\nvar eight = Expression.Constant(8);\nvar comparison = Expression.GreaterThan(parameter, eight);\nvar lambda = Expression.Lambda<Func<int, bool>>(comparison, parameter);\n\nvar numbersGreaterThanEightUsingExpression = numbers\n    .Where(lambda.Compile())\n    .ToList();\n\nvar outputFromExpression = string.Join(", ", numbersGreaterThanEightUsingExpression);\nConsole.WriteLine(outputFromExpression); // 9, 10, 11, 12, 13, 14, 15\n')),Object(r.b)("p",null,"Essentially the lambda argument is broken down into its essential pieces."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"num")," is captured with ",Object(r.b)("inlineCode",{parentName:"li"},"Expression.Parameter")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"8")," is captured with ",Object(r.b)("inlineCode",{parentName:"li"},"Expression.Constant")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},">")," is captured with ",Object(r.b)("inlineCode",{parentName:"li"},"Expression.GreaterThan")),Object(r.b)("li",{parentName:"ul"},"and the entire lambda is captured with ",Object(r.b)("inlineCode",{parentName:"li"},"Expression.Lambda"))),Object(r.b)("p",null,"Below is an color coded image with each part of the lambda color coded to a respective variable."),Object(r.b)("img",{alt:"Expression variable breakdown",style:{width:"100%"},src:Object(i.a)("img/building-custom-linq-expressions/expression_variable_breakdown.png")}),Object(r.b)("p",null,"Another great way to have a visual look at what happens under the hood is by adding a breakpoint, inspecting the lambda variable and looking at the ",Object(r.b)("inlineCode",{parentName:"p"},"DebugView")," property, you'll see that it looks very similar to the actual lambda that we passed in to the ",Object(r.b)("inlineCode",{parentName:"p"},".Where")," call originally."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),".Lambda #Lambda1<System.Func`2[System.Int32,System.Boolean]>(System.Int32 $num) {\n    $num > 8\n}\n")),Object(r.b)("h3",{id:"ok-but-why-would-i-do-all-of-this-extra-work"},"Ok. But why would I do all of this extra work?"),Object(r.b)("p",null,"It turns out that there are some things that aren't possible with LINQ. I explicitly required an ",Object(r.b)("inlineCode",{parentName:"p"},".OrWhere")," function and just adding more ",Object(r.b)("inlineCode",{parentName:"p"},".Where")," calls equates to adding AND statements. Furthermore - I needed to be able to do it dynamically - so I couldn't build the entire lambda upfront with ",Object(r.b)("inlineCode",{parentName:"p"},"||"),". Joseph Albahari mentions a similar problem on ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"http://www.albahari.com/nutshell/predicatebuilder.aspx"}),"his website")," (and also a different approach to solving it) which I recommend you read."),Object(r.b)("h3",{id:"the-problem-i-needed-to-solve"},"The problem I needed to solve"),Object(r.b)("p",null,"Suppose you have a database with the following structure (I've omitted sales, because it is not needed to illustrate my concept) and you have a service that gives you the location where each product was sold the most - and you now needed to say what the price was of the product at each of those locations. How would you do it (without multiple database queries)?"),Object(r.b)("img",{alt:"Database structure",style:{width:"100%"},src:Object(i.a)("img/building-custom-linq-expressions/database_structure.png")}),Object(r.b)("p",null,"The service returns a list of ",Object(r.b)("inlineCode",{parentName:"p"},"TopProductSalesLocation")," of which you can see the definition below."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-csharp"}),"public class TopProductSalesLocation\n{\n    public Guid ProductId { get; set; }\n    public Guid LocationId { get; set; }\n}\n")),Object(r.b)("h3",{id:"quick-environment-setup"},"Quick environment setup"),Object(r.b)("p",null,"This is how I set up the environment for the purpose of this post:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"100 products"),Object(r.b)("li",{parentName:"ul"},"100 sellers with 100 locations each (10000 locations in total)"),Object(r.b)("li",{parentName:"ul"},"A link between each product and each location (1000000 in total)")),Object(r.b)("p",null,"The following (very ugly) code was used to generate my fake data (be warned - it takes a while to run)."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-csharp"}),'var rand = new Random();\nusing (var context = new ApplicationDbContext())\n{\n    // create 100 products\n    for (var i = 1; i < 101; i++)\n        context.Products.Add(new Product()\n        {\n            Name = $"Product {i}"\n        });\n    context.SaveChanges();\n\n    var allProductIds = context\n        .Products\n        .Select(p => p.Id)\n        .ToList();\n\n    // create 100 sellers, and 100 locations per seller\n    // create a location product link for each product and each location\n    for (int i = 1; i < 101; i++)\n    {\n        var seller = new Seller()\n        {\n            Name = $"Seller {i}",\n            Locations = new List<Location>()\n        };\n\n        for (var j = 1; j < 101; j++)\n        {\n            var sellerLocation = new Location()\n            {\n                Name = $"Seller Location {j}",\n                ProductLocations = allProductIds.Select(pid => new ProductLocation()\n                {\n                    ProductId = pid,\n                    Price = Convert.ToDecimal(rand.NextDouble() * rand.Next(1, 100))\n                }).ToList()\n            };\n\n            seller.Locations.Add(sellerLocation);\n        }\n\n        context.Sellers.Add(seller);\n    }\n\n    context.SaveChanges();\n\n    Console.WriteLine($"Products {context.Products.Count()}"); // 100\n    Console.WriteLine($"Sellers {context.Sellers.Count()}"); // 100\n    Console.WriteLine($"Locations {context.Locations.Count()}"); // 10000\n    Console.WriteLine($"ProductLocations {context.ProductLocations.Count()}"); // 1000000\n}\n')),Object(r.b)("h3",{id:"the-first-naive-approach"},"The first naive approach"),Object(r.b)("p",null,"Well - I'd just select all the ",Object(r.b)("inlineCode",{parentName:"p"},"ProductLocations"),"'s that contain all the product ids and all the location ids. Let's try it."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-csharp"}),"var topProductSalesLocations = topProductSalesLocationService\n                                .GetTopProductSalesLocations();\n\nusing (var context = new ApplicationDbContext())\n{\n    var topSellingProductIds = topProductSalesLocations\n        .Select(tpsl => tpsl.ProductId)\n        .ToList();\n    var topSellingLocationIds = topProductSalesLocations\n        .Select(tpsl => tpsl.LocationId)\n        .ToList();\n\n    var productLocations = context\n        .ProductLocations\n        .Where(pl => topSellingProductIds.Contains(pl.ProductId) &&\n                     topSellingLocationIds.Contains(pl.LocationId))\n        .ToList();\n\n    Console.Write(productLocations.Count); // 10000\n}\n")),Object(r.b)("p",null,"There are two problems with this:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"You get a ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Cartesian_product"}),"cartesian product")," of 100 ","*"," 100 = 10 000 items as a worst case scenario. What happens if you had 200 products, or what about 1000 products?"),Object(r.b)("li",{parentName:"ul"},"You will have to filter out the results in memory again to get back to the original 100 items that you actually wanted.")),Object(r.b)("p",null,"As you can imagine - this is not going to scale very well."),Object(r.b)("h3",{id:"expressions-to-the-rescue"},"Expressions to the rescue"),Object(r.b)("p",null,"Let's do this again - but using expressions and see what the difference is."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-csharp"}),'var topProductSalesLocations = topProductSalesLocationService\n            .GetTopProductSalesLocations();\n\nvar parameter = Expression.Parameter(typeof(ProductLocation), "pl");\nExpression comparisonExpression = null;\nforeach (var topProductSalesLocation in topProductSalesLocations)\n{\n    var productIdProperty = Expression\n        .Property(parameter, nameof(ProductLocation.ProductId));\n    var productIdConstant = Expression\n        .Constant(topProductSalesLocation.ProductId);\n    var productIdComparison = Expression\n        .Equal(productIdProperty, productIdConstant);\n\n    var locationIdProperty = Expression\n        .Property(parameter, nameof(ProductLocation.LocationId));\n    var locationIdConstant = Expression\n        .Constant(topProductSalesLocation.LocationId);\n    var locationIdComparison = Expression\n        .Equal(locationIdProperty, locationIdConstant);\n\n    var productIdAndLocationIdComparison = Expression\n        .And(productIdComparison, locationIdComparison);\n\n    if (comparisonExpression == null)\n        comparisonExpression = productIdAndLocationIdComparison;\n    else\n        comparisonExpression = Expression\n            .Or(comparisonExpression, productIdAndLocationIdComparison);\n}\n\nusing (var context = new ApplicationDbContext())\n{\n    var lambda = Expression\n        .Lambda<Func<ProductLocation, bool>>(comparisonExpression, parameter);\n\n    var productLocations = context.ProductLocations\n        .Where(lambda)\n        .ToList();\n\n    Console.Write(productLocations.Count); // 100\n}\n')),Object(r.b)("p",null,"We only get the 100 records we wanted - instead of the 10000 that is a result of the cartesian product. Which is a lot easier to work with and will have a smaller footprint."))}p.isMDXComponent=!0}}]);