(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{66:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return s}));var n=a(2),r=a(6),i=(a(0),a(88)),o={id:"a-case-for-a-lower-footprint-json-specification",title:"A case for a lower footprint JSON specification",author:"Jaco Jansen van Vuuren",author_title:"Software Developer",author_url:"https://github.com/jacojvv-dev",author_image_url:"https://avatars0.githubusercontent.com/u/14131955?v=4",tags:["json","network traffic","saving polar bears (maybe?)","api"],image:"https://raw.githubusercontent.com/jacojvv-dev/jacojvv.dev/main/static/img/covers/2020-08-13-a-case-for-a-lower-footprint-json-specification.png"},b={permalink:"/blog/a-case-for-a-lower-footprint-json-specification",editUrl:"https://github.com/jacojvv-dev/jacojvv.dev/edit/main/blog/2020-08-13-a-case-for-a-lower-footprint-json-specification.md",source:"@site/blog\\2020-08-13-a-case-for-a-lower-footprint-json-specification.md",description:"As human beings we tend not to think about things too much once they work. We all have that one application running somewhere on a server rotting away that \"just works\" - we should probably revise it every now and again - but we don't - because it's a mental load we just don't need.",date:"2020-08-13T00:00:00.000Z",tags:[{label:"json",permalink:"/blog/tags/json"},{label:"network traffic",permalink:"/blog/tags/network-traffic"},{label:"saving polar bears (maybe?)",permalink:"/blog/tags/saving-polar-bears-maybe"},{label:"api",permalink:"/blog/tags/api"}],title:"A case for a lower footprint JSON specification",readingTime:5.785,truncated:!0,nextItem:{title:"Building a data pipeline to deliver audio streaming insights",permalink:"/blog/building-a-data-pipeline-to-deliver-audio-streaming-insights"}},c=[{value:"JSON can be optimized?",id:"json-can-be-optimized",children:[]},{value:"The problem",id:"the-problem",children:[]},{value:"Converting and comparing the difference in size",id:"converting-and-comparing-the-difference-in-size",children:[]},{value:"The difference in size between CSV and JSON",id:"the-difference-in-size-between-csv-and-json",children:[]},{value:"The solution",id:"the-solution",children:[]},{value:"My (probably bad) attempt at solving the problem",id:"my-probably-bad-attempt-at-solving-the-problem",children:[]},{value:"Converting",id:"converting",children:[]},{value:"The difference in size between JSON and JSON-B",id:"the-difference-in-size-between-json-and-json-b",children:[]},{value:"Yeah - ok. But GZIP fixes the issue, right?",id:"yeah---ok-but-gzip-fixes-the-issue-right",children:[]},{value:"Ok - so how much bandwidth are we talking about saving using json-b and gzip?",id:"ok---so-how-much-bandwidth-are-we-talking-about-saving-using-json-b-and-gzip",children:[]},{value:"Ok. So should we seriously consider doing this?",id:"ok-so-should-we-seriously-consider-doing-this",children:[]}],l={rightToc:c};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"As human beings we tend not to think about things too much once they work. We all have that one application running somewhere on a server rotting away that \"just works\" - we should probably revise it every now and again - but we don't - because it's a mental load we just don't need."),Object(i.b)("p",null,"I'd argue that we apply the same mindset to our daily tools and established patterns - without ever thinking about it too much either. Recently while downloading a 4.26 GB CSV file from an Azure Databricks instance I was reminded of an idea I had a few months ago; JSON can be optimized."),Object(i.b)("h3",{id:"json-can-be-optimized"},"JSON can be optimized?"),Object(i.b)("p",null,"Yeah - anything can. Imagine I'd said the same thing about XML a good few years ago - blasphemy. I'd be stoned as soon as people could look away from their (irreplaceable) SOAP services to read my wild ideas!"),Object(i.b)("h3",{id:"the-problem"},"The problem"),Object(i.b)("p",null,"A lot of what we transfer with APIs today is redundant data - namely - property names in JSON. You might think this is a negligible detail of the JSON specification and the amount of data that is transferred is minimal - but it will add up over time. As an example of redundancy - let's look at my 4.26 GB CSV file - but convert it to a JSON file and compare the difference in size."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"you may be wondering why I am comparing to a CSV file and the reason is rather simple - CSV is doing something right in the way it transfers data. Property names are only ever sent once.")),Object(i.b)("h3",{id:"converting-and-comparing-the-difference-in-size"},"Converting and comparing the difference in size"),Object(i.b)("p",null,"To convert the CSV file into JSON - I wrote a little utility using nodejs. I was too tired to make it elegant - so I opted to just output the JSON at every 100000 lines of CSV."),Object(i.b)("p",null,'I can already hear someone saying that the extra pair of "[" per file is going to taint the result - but at the size of the data - I really don\'t think it will matter.'),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const csv = require("csv-parser");\nconst fs = require("fs");\n\nlet results = [];\nlet i = 0;\n\nfs.createReadStream("large.csv")\n  .pipe(csv())\n  .on("data", (data) => {\n    if (i % 100000 === 0) {\n      writeResultsToFile();\n    }\n    results.push(data);\n    i++;\n  })\n  .on("end", () => {\n    writeResultsToFile();\n  });\n\nfunction writeResultsToFile() {\n  fs.writeFileSync(`json/${i}.json`, JSON.stringify(results));\n  results = [];\n}\n')),Object(i.b)("h3",{id:"the-difference-in-size-between-csv-and-json"},"The difference in size between CSV and JSON"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Size (GB)"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Size (MB)"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Size Gain (GB)"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Size Gain (MB)"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Size Gain (%)"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"}),"Information Gain (%)"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"CSV"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"4.26"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"4583.37"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"-"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"-"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"-"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"-")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"JSON"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"7.54"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"8096.81"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"+3.28"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"+3513.44"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"43.39%"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0%")))),Object(i.b)("p",null,"As expected - a rather massive increase of 43% for absolutely no extra information. Redundant data - killing polar bears as it travels through our networks."),Object(i.b)("h3",{id:"the-solution"},"The solution"),Object(i.b)("p",null,"We need a JSON specification that removes as much of the redundancy as possible - whilst keeping the ease of use of JSON that we all came to know and love."),Object(i.b)("h3",{id:"my-probably-bad-attempt-at-solving-the-problem"},"My (probably bad) attempt at solving the problem"),Object(i.b)("p",null,"Instead of defining our properties for every object when we have an array - we can define a map that we can use to perform the lookup. This will remove the need to send redundant data over the wire."),Object(i.b)("h5",{id:"current"},"Current"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "propertyOne": "valueOne",\n    "propertyTwo": "valueTwo",\n    "propertyThree": "valueThree",\n    "propertyFour": {\n        "ChildOne": 1,\n        "ChildTwo": false,\n        "ChildThree": "E"\n    }\n  },\n  {\n    "propertyOne": "valueOne",\n    "propertyTwo": "valueTwo",\n    "propertyThree": "valueThree",\n    "propertyFour": {\n        "ChildOne": 1,\n        "ChildTwo": false,\n        "ChildThree": "E"\n    }\n  },\n  {\n    "propertyOne": "valueOne",\n    "propertyTwo": "valueTwo",\n    "propertyThree": "valueThree",\n    "propertyFour": {\n        "ChildOne": 1,\n        "ChildTwo": false,\n        "ChildThree": "E"\n    }\n  }\n  ...\n]\n')),Object(i.b)("h5",{id:"proposed"},"Proposed"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"I have dubbed it json-b and you can read my bad attempt at implementing it ",Object(i.b)("a",Object(n.a)({parentName:"em"},{href:"https://github.com/jacojvv-dev/json-b"}),"here"))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'//jsonb//\n{"1":"propertyOne", "2": "propertyTwo", "3": "propertyThree", "4": "propertyFour", "4.1": "ChildOne", "4.2": "ChildTwo", "4.3": "ChildThree"}\n//jsonb//\n[\n  {\n    "1": "valueOne",\n    "2": "valueTwo",\n    "3": "valueThree",\n    "4": {\n        "4.1": 1,\n        "4.2": false,\n        "4.3": "E"\n    }\n  },\n  {\n    "1": "valueOne",\n    "2": "valueTwo",\n    "3": "valueThree",\n    "4": {\n        "4.1": 1,\n        "4.2": false,\n        "4.3": "E"\n    }\n  },\n  {\n    "1": "valueOne",\n    "2": "valueTwo",\n    "3": "valueThree",\n    "4": {\n        "4.1": 1,\n        "4.2": false,\n        "4.3": "E"\n    }\n  }\n  ...\n]\n')),Object(i.b)("h3",{id:"converting"},"Converting"),Object(i.b)("p",null,"To compare the results - I wrote a naive ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/jacojvv-dev/json-b"}),"(and very bad, and not feature complete, and definitely not close to production ready)")," implementation of my proposal and applied it to one of the files from the previous CSV -> JSON conversion."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const fs = require("fs");\nconst JSONB = require("json-b");\n\n// super optimized stuff ;)\nconst data = JSON.parse(fs.readFileSync("100000.json"));\nfs.writeFileSync("100000.jsonb", JSONB.stringify(data));\n')),Object(i.b)("h3",{id:"the-difference-in-size-between-json-and-json-b"},"The difference in size between JSON and JSON-B"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Size (MB)"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Size Reduction (MB)"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Size Reduction (%)"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"}),"Information Lost (%)"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"JSON"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"68.8"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"-"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"-"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"-")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"JSON-B"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"51.5"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"-17.3"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"-25.15%"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0%","*")))),Object(i.b)("p",null,"*"," ",Object(i.b)("em",{parentName:"p"},"If you use my json-b implementation on real world data, you'll probably lose information")),Object(i.b)("h3",{id:"yeah---ok-but-gzip-fixes-the-issue-right"},"Yeah - ok. But GZIP fixes the issue, right?"),Object(i.b)("p",null,"For the most part - it does. But we are trying to squeeze out every byte we can."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Size (MB)"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Size Reduction (MB)"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Size Reduction (%)"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"}),"Information Lost (%)"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"JSON (GZIP)"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"8.84"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"-"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"-"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"-")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"JSON-B (GZIP)"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"8.33"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"-0.51"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"-5.77%"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"0%","*")))),Object(i.b)("h3",{id:"ok---so-how-much-bandwidth-are-we-talking-about-saving-using-json-b-and-gzip"},"Ok - so how much bandwidth are we talking about saving using json-b and gzip?"),Object(i.b)("p",null,"In the real world you'll probably not return 100000 rows at a time - so let's use a better ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://jsonplaceholder.typicode.com/posts"}),"example"),". We'll also pretend you have a very popular blog - and get 100000 hits per day."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Size (KB)"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Bandwidth Per Day (KB)"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Bandwidth For 30 Days (MB)"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"right"}),"Difference Over 30 Days (MB)"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"JSON (GZIP)"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"6.94"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"694000"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"20820"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"-")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"JSON-B (GZIP)"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"6.72"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"672000"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"20160"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"right"}),"660")))),Object(i.b)("h3",{id:"ok-so-should-we-seriously-consider-doing-this"},"Ok. So should we seriously consider doing this?"),Object(i.b)("p",null,"Probably not. The savings in electricity costs needed to transfer the data might be outweighed by the processing power needed to parse/stringify json-b files. GZIP also does a pretty good job already. Furthermore - in some cases, like where the response is only an object - json-b might make things larger."),Object(i.b)("p",null,"It is an interesting thought experiment and I find it very curious to imagine what the global bandwidth saving could be if we all used a more optimized JSON."))}s.isMDXComponent=!0},88:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return h}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),s=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},p=function(e){var t=s(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},O=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=s(a),O=n,h=p["".concat(o,".").concat(O)]||p[O]||d[O]||i;return a?r.a.createElement(h,b(b({ref:t},l),{},{components:a})):r.a.createElement(h,b({ref:t},l))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=O;var b={};for(var c in t)hasOwnProperty.call(t,c)&&(b[c]=t[c]);b.originalType=e,b.mdxType="string"==typeof e?e:n,o[1]=b;for(var l=2;l<i;l++)o[l]=a[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}O.displayName="MDXCreateElement"}}]);